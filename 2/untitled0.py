# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBRt0Qgps_JMlmRYbF5TjUZ0xdwEmCY5
"""

!pip install streamlit
!pip install gradio

!pip install pinecone-client cohere gradio PyPDF2

import pinecone
import cohere
import gradio as gr
import PyPDF2
from io import BytesIO



!pip install pinecone-client

from pinecone import Pinecone, ServerlessSpec

# Your Pinecone credentials and settings
PINECONE_API_KEY = 'df8490a2-ccb3-47f4-8ded-c658d28092df'
PINECONE_ENVIRONMENT = 'us-east-1'
INDEX_NAME = 'multilingual-e5-large'
DIMENSION = 768  # Set this to the dimension of your embeddings

# Initialize Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)

from pinecone import Pinecone

PINECONE_API_KEY = 'df8490a2-ccb3-47f4-8ded-c658d28092df'
PINECONE_ENVIRONMENT = 'us-east-1'
INDEX_NAME = 'multilingual-e5-large'

# Initialize Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)

# Connect to the index
index = pc.Index(INDEX_NAME)
print(f"Connected to index '{INDEX_NAME}'.")

import gradio as gr
import PyPDF2
from io import BytesIO
import cohere
import pinecone

COHERE_API_KEY = 'fLxnpWWyrsYKM1CjH9cFrXRhijqt3CLcn7RF9rog'
cohere_client = cohere.Client(COHERE_API_KEY)

def process_pdf(pdf_file):
    # Read PDF and extract text
    pdf_reader = PyPDF2.PdfFileReader(BytesIO(pdf_file.read()))
    text = ''
    for page in range(pdf_reader.numPages):
        text += pdf_reader.getPage(page).extract_text()
    return text

def get_embeddings(text):
    # Get embeddings for text
    response = cohere_client.embed(texts=[text])
    return response.embeddings[0]

def query_index(query):
    # Generate query embedding
    query_embedding = get_embeddings(query)

    # Query Pinecone
    results = index.query(queries=[query_embedding], top_k=5)
    return results

import pinecone

# Define your Pinecone API key, environment, and index name
PINECONE_API_KEY = 'df8490a2-ccb3-47f4-8ded-c658d28092df'
PINECONE_ENVIRONMENT = 'us-east-1'
INDEX_NAME = 'multilingual-e5-large'

# Initialize Pinecone
pc = pinecone.Pinecone(api_key=PINECONE_API_KEY, environment=PINECONE_ENVIRONMENT)

# Connect to the existing index
try:
    index = pc.Index(INDEX_NAME)
    print(f"Connected to index '{INDEX_NAME}'.")
except Exception as e:
    print(f"Error connecting to index: {e}")

import pinecone
import cohere
import PyPDF2
from io import BytesIO

# Define your Cohere API key and initialize Cohere client
COHERE_API_KEY = 'your-cohere-api-key'  # Replace with your Cohere API key
cohere_client = cohere.Client(COHERE_API_KEY)

# Function to extract text from PDF
def process_pdf(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text() + "\n"
    return text

# Function to get embeddings for text using Cohere
def get_embeddings(text):
    response = cohere_client.embed(texts=[text])
    return response.embeddings[0]

# Function to query Pinecone index
def query_index(question):
    # Assume that `index` is the Pinecone index object created above
    # Use a query embedding method with Pinecone
    question_embedding = get_embeddings(question)
    results = index.query(
        queries=[question_embedding],
        top_k=5  # Number of top results to retrieve
    )
    return results

# Define the QA interface function
def qa_interface(pdf_file, question):
    # Process the PDF
    text = process_pdf(pdf_file)

    # Get embeddings for the document
    doc_embedding = get_embeddings(text)

    # Query the index
    results = query_index(question)

    # Return results
    return results

# Define Gradio interface
import gradio as gr

interface = gr.Interface(
    fn=qa_interface,
    inputs=[
        gr.File(label="Upload PDF"),
        gr.Textbox(label="Ask a Question")
    ],
    outputs="text"
)

# Launch the interface
interface.launch()